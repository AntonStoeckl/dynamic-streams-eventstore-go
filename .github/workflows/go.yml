#file: noinspection UndefinedAction, UndefinedParamsPresent
name: Run tests and upload coverage

on:
  push

permissions:
  contents: read

jobs:
  test:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: eventstore
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/wadey/gocovmerge@latest

      - name: Initialize database
        run: |
          PGPASSWORD=test psql -h localhost -U test -d eventstore -f testutil/postgresengine/initdb/01-init.sql

      - name: Run tests
        run: |
          echo "Running eventstore package tests..."
          go test -race -coverprofile=coverage-eventstore.out -coverpkg=./eventstore/... -covermode=atomic ./eventstore/
          
          echo "Running factory function tests..."
          go test -race -coverprofile=coverage-factory.out -coverpkg=./eventstore/... -covermode=atomic ./eventstore/postgresengine -run "^Test_FactoryFunctions_"
          
          echo "Running observability tests..."
          go test -race -coverprofile=coverage-observability.out -coverpkg=./eventstore/... -covermode=atomic ./eventstore/postgresengine -run "^Test_Observability_"
          
          echo "Running functional tests with pgxpool adapter..."
          ADAPTER_TYPE=pgx.pool go test -race -coverprofile=coverage-pgxpool.out -coverpkg=./eventstore/... -covermode=atomic ./eventstore/postgresengine -run "^Test_" -skip "^Test_FactoryFunctions_|^Test_Observability_"
          
          echo "Running functional tests with sqldb adapter..."
          ADAPTER_TYPE=sql.db go test -race -coverprofile=coverage-sqldb.out -coverpkg=./eventstore/... -covermode=atomic ./eventstore/postgresengine -run "^Test_" -skip "^Test_FactoryFunctions_|^Test_Observability_"
          
          echo "Running functional tests with sqlxdb adapter..."
          ADAPTER_TYPE=sqlx.db go test -race -coverprofile=coverage-sqlxdb.out -coverpkg=./eventstore/... -covermode=atomic ./eventstore/postgresengine -run "^Test_" -skip "^Test_FactoryFunctions_|^Test_Observability_"
          
          echo "Running oteladapters package tests..."
          go test -race -coverprofile=coverage-oteladapters.out -coverpkg=./eventstore/oteladapters/... -covermode=atomic ./eventstore/oteladapters
          
          echo "Merging coverage profiles..."
          gocovmerge coverage-eventstore.out coverage-factory.out coverage-observability.out coverage-pgxpool.out coverage-sqldb.out coverage-sqlxdb.out coverage-oteladapters.out > coverage.out

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
